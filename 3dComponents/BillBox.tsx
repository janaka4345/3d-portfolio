/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import RedirectOverlay from '@/components/custom/RedirectOverlay'
import { Html, useGLTF } from '@react-three/drei'
import { RigidBody } from '@react-three/rapier'
import { useState } from 'react'
import { Mesh, MeshStandardMaterial } from 'three'
import { GLTF } from 'three-stdlib'
import GithubIframe from './GithubIframe'
import WebsiteIframe from './WebsiteIframe'

type GLTFResult = GLTF & {
    nodes: {
        Props_Base_1: Mesh
        Props_Base_2: Mesh
        Props_Base_3: Mesh
        ['Node-Mesh001']: Mesh
        ['Node-Mesh001_1']: Mesh
        ['Node-Mesh001_2']: Mesh
        sidescreenScreen: Mesh
        billboard001: Mesh
        billboard002: Mesh
        floor: Mesh
        leftwall: Mesh
        rightwall: Mesh
        frontwall: Mesh
        backwall: Mesh
        Cylinder: Mesh
    }
    materials: {
        DarkGrey: MeshStandardMaterial
        Main: MeshStandardMaterial
        Accent: MeshStandardMaterial
        mat17: MeshStandardMaterial
        mat18: MeshStandardMaterial
        mat22: MeshStandardMaterial
        mat23: MeshStandardMaterial
        billbordScrren: MeshStandardMaterial
        Material: MeshStandardMaterial
        ['Material.001']: MeshStandardMaterial
    }
}

export type Data = {
    githubUrl: string,
    githubRealUrl: string,
    websiteUrl: string
}

export default function BillBox(props: JSX.IntrinsicElements['group'] & Data) {
    const { nodes, materials } = useGLTF('/billBox.glb') as GLTFResult

    const [open, setOpen] = useState<boolean>(false)

    const handleCollision = (collisionType: string) => {
        console.log('collisiob with pad :', collisionType);
        if (collisionType === 'in') {
            setOpen(true)
        }
        if (collisionType === 'out') {
            setOpen(false)
        }
    }

    return (
        <>
            <group {...props} dispose={null}>
                <group name="Scene">
                    <RigidBody type='fixed' colliders='hull' onCollisionEnter={() => handleCollision('in')} >
                        <group name="telepad" position={[-0.067, 0, -0.063]}>
                            <group name="Props_Base" position={[0.537, 0.101, 0.821]} scale={98.291}>
                                <mesh
                                    name="Props_Base_1"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Props_Base_1.geometry}
                                    material={materials.DarkGrey}
                                />
                                <mesh
                                    name="Props_Base_2"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Props_Base_2.geometry}
                                    material={materials.Main}
                                />
                                <mesh
                                    name="Props_Base_3"
                                    castShadow
                                    receiveShadow
                                    geometry={nodes.Props_Base_3.geometry}
                                    material={materials.Accent}
                                />
                            </group>
                        </group>
                    </RigidBody>
                    <group
                        name="billboard"
                        position={[1.746, 2.164, -1.469]}
                        rotation={[0, 1.571, 0]}
                        scale={[5.627, 5.627, 5.948]}>
                        <mesh
                            name="Node-Mesh001"
                            castShadow
                            receiveShadow
                            geometry={nodes['Node-Mesh001'].geometry}
                            material={materials.mat17}
                        />
                        <mesh
                            name="Node-Mesh001_1"
                            castShadow
                            receiveShadow
                            geometry={nodes['Node-Mesh001_1'].geometry}
                            material={materials.mat18}
                        />
                        <mesh
                            name="Node-Mesh001_2"
                            castShadow
                            receiveShadow
                            geometry={nodes['Node-Mesh001_2'].geometry}
                            material={materials.mat22}
                        />
                    </group>
                    <mesh
                        name="sidescreenScreen"
                        castShadow
                        receiveShadow
                        geometry={nodes.sidescreenScreen.geometry}
                        material={materials.mat23}
                        position={[-1.857, 3.652, -0.187]}
                        rotation={[Math.PI, -0.79, Math.PI]}
                        scale={[4.904, 4.311, 3.377]}
                    />
                    <mesh
                        name="billboard001"
                        castShadow
                        receiveShadow
                        geometry={nodes.billboard001.geometry}
                        // material={materials.billbordScrren}
                        position={[1.767, 3.375, -1.305]}
                        rotation={[0, 1.571, 0]}
                        scale={[5.627, 5.627, 5.948]}
                    >
                        <meshStandardMaterial color='black' />
                        <WebsiteIframe websiteUrl={props.websiteUrl} />
                    </mesh>
                    <mesh
                        name="billboard002"
                        castShadow
                        receiveShadow
                        geometry={nodes.billboard002.geometry}
                        position={[-1.89, 3.65, -0.213]}
                        rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
                        scale={5.532}
                    >
                        <meshStandardMaterial color='black' />

                        <GithubIframe githubUrl={props.githubUrl} />
                    </mesh>
                    <RigidBody type="fixed" colliders='hull' onCollisionEnter={() => handleCollision('out')}>
                        <mesh
                            name="floor"
                            castShadow
                            receiveShadow
                            geometry={nodes.floor.geometry}
                            material={materials.Material}
                            position={[0, 0, 7.584]}
                            scale={-9.525}
                        />
                    </RigidBody>
                    <RigidBody type="fixed" colliders='hull'>
                        <mesh
                            name="leftwall"
                            castShadow
                            receiveShadow
                            geometry={nodes.leftwall.geometry}
                            material={materials.billbordScrren}
                            position={[-9.492, 10.965, -1.165]}
                            rotation={[0, 0, -Math.PI / 2]}
                            scale={10.964}
                        />
                        <mesh
                            name="rightwall"
                            castShadow
                            receiveShadow
                            geometry={nodes.rightwall.geometry}
                            material={materials.billbordScrren}
                            position={[9.496, -3.808, -1.165]}
                            rotation={[0, 0, Math.PI / 2]}
                            scale={10.964}
                        />
                        <mesh
                            name="frontwall"
                            castShadow
                            receiveShadow
                            geometry={nodes.frontwall.geometry}
                            material={materials.billbordScrren}
                            position={[0, 0.71, 8.36]}
                            rotation={[Math.PI / 2, 0, 0]}
                            scale={-9.525}
                        />
                        <mesh
                            name="backwall"
                            castShadow
                            receiveShadow
                            geometry={nodes.backwall.geometry}
                            material={materials.billbordScrren}
                            position={[0, 6.499, -1.883]}
                            rotation={[-Math.PI / 2, 0, 0]}
                            scale={-9.525}
                        />

                    </RigidBody>
                    <mesh
                        name="Cylinder"
                        castShadow
                        receiveShadow
                        geometry={nodes.Cylinder.geometry}
                        // material={materials['Material.001']}
                        position={[0.474, 0.921, 0.752]}
                        scale={0.661}
                    >
                        <meshStandardMaterial color='rgb(0,255,245)' transparent={true} opacity={0.6} />
                    </mesh>
                    <pointLight
                        name="Point"
                        intensity={108.703}
                        decay={2}
                        color="#00fffc"
                        position={[0.477, 0.718, 0.728]}
                        rotation={[-Math.PI / 2, 0, 0]}
                    />
                </group>
            </group>
            <Html>
                <RedirectOverlay open={open} handleClose={handleCollision} githubUrl={props.githubRealUrl} websiteUrl={props.websiteUrl} />
            </Html>
        </>
    )
}

useGLTF.preload('/billBox.glb')
