/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Html, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
    nodes: {
        Props_Base_1: THREE.Mesh
        Props_Base_2: THREE.Mesh
        Props_Base_3: THREE.Mesh
        ['Node-Mesh001']: THREE.Mesh
        ['Node-Mesh001_1']: THREE.Mesh
        ['Node-Mesh001_2']: THREE.Mesh
        sidescreenScreen: THREE.Mesh
        billboard001: THREE.Mesh
        billboard002: THREE.Mesh
    }
    materials: {
        DarkGrey: THREE.MeshStandardMaterial
        Main: THREE.MeshStandardMaterial
        Accent: THREE.MeshStandardMaterial
        mat17: THREE.MeshStandardMaterial
        mat18: THREE.MeshStandardMaterial
        mat22: THREE.MeshStandardMaterial
        mat23: THREE.MeshStandardMaterial
        billbordScrren: THREE.MeshStandardMaterial
    }
}

export function BillBoardSet6(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useGLTF('/billboardSet6.glb') as GLTFResult

    const [first, setfirst] = useState<string | TrustedHTML>("")

    useEffect(() => {
        console.log('hiya');
        // console.log({ geometryRef });
        // console.log({ htmlRef });

        // TO Find the position of the bill board

        // if (geometryRef.current) {
        //     const positions = geometryRef?.current?.geometry?.attributes?.position?.array;
        //     let minX, minY, minZ, maxX, maxY, maxZ;

        //     for (let i = 0; i < positions.length; i += 3) {
        //         const x = positions[i];
        //         const y = positions[i + 1];
        //         const z = positions[i + 2];

        //         if (minX === undefined || x < minX) minX = x;
        //         if (maxX === undefined || x > maxX) maxX = x;
        //         if (minY === undefined || y < minY) minY = y;
        //         if (maxY === undefined || y > maxY) maxY = y;
        //         if (minZ === undefined || z < minZ) minZ = z;
        //         if (maxZ === undefined || z > maxZ) maxZ = z;
        //     }

        //     // Calculate properties (e.g., center)
        //     const centerX = (minX + maxX) / 2;
        //     const centerY = (minY + maxY) / 2;
        //     const centerZ = (minZ + maxZ) / 2;
        //     // setposition({ x: centerX, y: centerY, z: centerZ })

        //     console.log({ x: centerX, y: centerY, z: centerZ });


        //     //     // console.log('Geometry center:', centerX, centerY, centerZ);
        // }


        const url = '/github-web'; // Replace with the target website
        const fetchData = async () => {
            try {
                const response = await fetch(url);
                const html = await response.text();

                // const cleanHtml = DOMPurify.sanitize(html);
                // const parser = new DOMParser();
                // const doc = parser.parseFromString(html, 'text/html');

                // console.log({ cleanHtml });
                setfirst(html)

            } catch (error) {
                console.log(error);
            }
        }
        fetchData()


        return () => {

        }
    }, [])

    const handleCollision = (padName: string) => {
        console.log('collisiob with pad :', padName);

    }

    // const geometryRef = useRef<THREE.Mesh<THREE.BufferGeometry<THREE.NormalBufferAttributes>, THREE.Material | THREE.Material[], THREE.Object3DEventMap>>()

    // const htmlRef = useRef()
    // const { px, py, pz, rx, ry, rz, h, w } = useControls({
    //     px: {
    //         value: 4,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     py: {
    //         value: 0,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     pz: {
    //         value: 0,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     rx: {
    //         value: 0,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     ry: {
    //         value: -1.5,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     rz: {
    //         value: 0,
    //         min: -10,
    //         max: 10,
    //         step: 0.01,
    //     },
    //     w: {
    //         value: 850,
    //         min: 600,
    //         max: 2000,
    //         step: 10,
    //     },
    //     h: {
    //         value: 1124,
    //         min: 800,
    //         max: 2000,
    //         step: 10,
    //     }
    // })

    return (
        <group {...props} dispose={null}>
            <group name="Scene">
                <group name="telepad" position={[-0.067, 0, -0.063]}>
                    <group name="Props_Base" position={[0.537, 0.101, 0.821]} scale={98.291}>
                        <mesh
                            name="Props_Base_1"
                            castShadow
                            receiveShadow
                            geometry={nodes.Props_Base_1.geometry}
                            material={materials.DarkGrey}
                        />
                        <mesh
                            name="Props_Base_2"
                            castShadow
                            receiveShadow
                            geometry={nodes.Props_Base_2.geometry}
                            material={materials.Main}
                        />
                        <mesh
                            name="Props_Base_3"
                            castShadow
                            receiveShadow
                            geometry={nodes.Props_Base_3.geometry}
                            material={materials.Accent}
                        />
                    </group>
                </group>
                <group
                    name="billboard"
                    position={[1.746, 2.164, -1.469]}
                    rotation={[0, 1.571, 0]}
                    scale={[5.627, 5.627, 5.948]}>
                    <mesh
                        name="Node-Mesh001"
                        castShadow
                        receiveShadow
                        geometry={nodes['Node-Mesh001'].geometry}
                        material={materials.mat17}
                    />
                    <mesh
                        name="Node-Mesh001_1"
                        castShadow
                        receiveShadow
                        geometry={nodes['Node-Mesh001_1'].geometry}
                        material={materials.mat18}
                    />
                    <mesh
                        name="Node-Mesh001_2"
                        castShadow
                        receiveShadow
                        geometry={nodes['Node-Mesh001_2'].geometry}
                        material={materials.mat22}
                    />
                </group>
                <mesh
                    name="sidescreenScreen"
                    castShadow
                    receiveShadow
                    geometry={nodes.sidescreenScreen.geometry}
                    material={materials.mat23}
                    position={[-1.857, 3.652, -0.187]}
                    rotation={[Math.PI, -0.79, Math.PI]}
                    scale={[4.904, 4.311, 3.377]}
                />
                <mesh
                    // ref={geometryRef}
                    name="billboard001"
                    castShadow
                    receiveShadow
                    geometry={nodes.billboard001.geometry}
                    // material={materials.billbordScrren}
                    position={[1.767, 3.375, -1.305]}
                    rotation={[0, 1.571, 0]}
                    scale={[5.627, 5.627, 5.948]}
                >
                    <meshStandardMaterial color='black' />
                    <Html
                        distanceFactor={0.2}
                        transform
                        center
                        position={[0, 0, 0]}
                        rotation={[0, -Math.PI / 2, 0]}
                    // occlude
                    >
                        <Suspense fallback={<h1 className='text-9xl text-white w-fit h-fit mx-auto mt-96'>loading..</h1>}>
                            <iframe style={{ height: '1140px', width: '1660px' }} src="https://basicdesign-nine.vercel.app/" />
                        </Suspense>
                    </Html>

                </mesh>
                <mesh
                    name="billboard002"
                    castShadow
                    receiveShadow
                    geometry={nodes.billboard002.geometry}
                    // material={materials.billbordScrren}
                    position={[-1.89, 3.65, -0.213]}
                    rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
                    scale={5.532}
                >
                    <meshStandardMaterial color='black' />

                    <Html
                        wrapperClass='htmll'
                        className='border-none overflow-y-scroll overflow-hidden'
                        transform
                        center
                        distanceFactor={0.2}
                        position={[0, 0, 0]}
                        rotation={[0, -1.5, 0]}
                    // occlude
                    >
                        <Suspense fallback={<h1 className='text-9xl text-white w-fit h-fit mx-auto mt-96'>loading..</h1>}>
                            <div style={{ height: '1300px', width: '850px' }} dangerouslySetInnerHTML={{ __html: first }} /></Suspense>


                    </Html>

                </mesh>
            </group>
        </group>
    )
}

useGLTF.preload('/billboardSet6.glb')
